% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/surveymetadatafunctions.R
\name{get_unique_suffixes}
\alias{get_unique_suffixes}
\title{get_unique_suffixes}
\usage{
get_unique_suffixes(
  temp_dpdict,
  var_with_unique_id = "variable_names",
  var_with_strings = "variable_labels",
  var_with_question_groups = "question_group",
  seps_priority = c("- ", "_", "."),
  allow_unmatched_sep_count_from_end = TRUE,
  noisy = 0
)
}
\arguments{
\item{temp_dpdict}{a dpdict with cols for uniqueid (e.g. variable name), variable labels and question groups. Values in the \code{var_with_strings} column should be unique.}

\item{var_with_unique_id}{name of column to use as unique id (typically variable name)}

\item{var_with_strings}{name of column with strings to look for a suffix in (typically variable label)}

\item{var_with_question_groups}{name of column representing question groups of variables that should aim to find common suffix patterns within}

\item{seps_priority}{priority of separator strings to look for. separator strings determine what is a suffix (typically e.g. " - ")}

\item{allow_unmatched_sep_count_from_end}{whether to allow for suffixes that are identified by a sep in a different position relative to the end of the string}

\item{noisy}{either 0, 1, or 2. 1 and 2 provide increasingly noisy updates as the function works.}
}
\value{
A character vector with the same length and order as \code{temp_dpdict},
containing the determined suffix for each variable. Returns NA for
single-variable groups where no suffix was identified by separators.
Returns sequential numbers if no other unique suffix pattern was found
}
\description{
takes a dpdict and returns a vector of length nrow(dpdict) which is best-guess for best suffixes to add to each variable's question group label to make it unique
}
\details{
wants to find suffix based on a common sep type and, if allow_unmatched_sep_count_from_end == FALSE, common position of sep relative to the end
if can't find a suffix in labels, looks in variable name
and if can't find a unique suffix anywhere else, just assigns successive numbers
}
\examples{
get_unique_suffixes(create_dict_with_metadata(get_big_test_dat()))
}
